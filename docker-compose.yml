version: "3.8"
services:
  redis_db:
#    image: redis/redis-stack
    container_name: ${REDIS_CONTAINER_NAME}
    build:
      context: devops/redis
      dockerfile: Dockerfile
    restart: "unless-stopped"
    env_file:
      - ".env"
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - my_app
  postgres_db:
    image: postgres:latest
    container_name: ${POSTGRES_CONTAINER_NAME}
    restart: "unless-stopped"
    env_file:
      - ".env"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
      POSTGRES_USER: ${POSTGRES_DATABASE_USER}
      POSTGRES_DB: ${POSTGRES_DATABASE_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_app
  #    pg4:
  #        image: dpage/pgadmin4:2023-01-13-1
  #        environment:
  #           PGADMIN_DEFAULT_EMAIL: "don@mail.ru"
  #           PGADMIN_DEFAULT_PASSWORD: "1234"
  #           PGADMIN_DEFAULT_PASSWORD_FILE: ""
  #        restart: always
  #        ports:
  #          - 3000:80
  #        depends_on:
  #          - db
  tg_bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_CONTAINER_NAME}
    env_file:
      - ".env"
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_db:
        condition: service_healthy
    networks:
      - my_app
  #        command:
  #          - bash -c "pyton src/onboarding/manage.py runserver 8000"


  web:
    container_name: ${WEB_NAME}
    build:
      context: .
      dockerfile: Dockerfile.web
    env_file:
      - ".env"
    environment:
      DOCKER_UID: 0
      DOCKER_GID: 0
    ports:
      - 8000:8000
    networks:
      - my_app
    depends_on:
      postgres_db:
        condition: service_healthy
#    command:
##      - bash -c "python3 onboarding/manage.py migrate && python3 onboarding/manage.py runserver 8000"
#      - bash -c "ls"



networks:
  my_app:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
